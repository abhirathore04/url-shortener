# =============================================================================
# Docker Compose Configuration for URL Shortener Service
# Complete multi-service architecture with observability
# =============================================================================

version: '3.8'

# =============================================================================
# Networks
# =============================================================================
networks:
  url-shortener-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# =============================================================================
# Services
# =============================================================================
services:
  # ---------------------------------------------------------------------------
  # Core Application Services
  # ---------------------------------------------------------------------------
  
  # URL Shortener API Service
  url-shortener:
    build:
      context: ./service
      dockerfile: Dockerfile
      target: production
    container_name: url-shortener-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Application Configuration
      PORT: 8080
      NODE_ENV: production
      LOG_LEVEL: info
      LOG_FORMAT: json
      
      # Database Configuration
      MONGO_URI: mongodb://mongodb:27017/shortener
      REDIS_URL: redis://redis:6379
      MONGO_MAX_POOL_SIZE: 10
      REDIS_MAX_CONNECTIONS: 10
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET:-your-production-jwt-secret-change-this}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080
      
      # Business Logic Configuration
      SHORT_URL_LENGTH: 7
      SHORT_URL_ALPHABET: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
      URL_TTL_DAYS: 365
      MAX_URL_LENGTH: 2048
      MIN_URL_LENGTH: 10
      
      # Observability Configuration
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: url-shortener
      OTEL_SERVICE_VERSION: 0.1.0
      OTEL_RESOURCE_ATTRIBUTES: service.name=url-shortener,service.version=0.1.0
      
      # Feature Flags
      ENABLE_DEBUG_ROUTES: false
      ENABLE_METRICS_ENDPOINT: true
      ENABLE_HEALTH_DETAILED: true
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.url-shortener.rule=Host(`localhost`)"
      - "traefik.http.services.url-shortener.loadbalancer.server.port=8080"

  # ---------------------------------------------------------------------------
  # Data Layer Services
  # ---------------------------------------------------------------------------
  
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: url-shortener-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: shortener
    volumes:
      - mongodb-data:/data/db
      - ./infrastructure/mongodb/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: ["mongod", "--auth", "--bind_ip_all"]

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: url-shortener-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
      - ./infrastructure/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["redis-server", "/etc/redis/redis.conf"]

  # ---------------------------------------------------------------------------
  # Observability Stack
  # ---------------------------------------------------------------------------
  
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: url-shortener-otel-collector
    restart: unless-stopped
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics exporter
    volumes:
      - ./infrastructure/otel/otel-collector.yml:/etc/otel-collector.yml:ro
    networks:
      - url-shortener-network
    command: ["--config=/etc/otel-collector.yml"]
    depends_on:
      - prometheus
      - jaeger

  # Prometheus Metrics Storage
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: url-shortener-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - url-shortener-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: url-shortener-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - url-shortener-network
    depends_on:
      - prometheus

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: url-shortener-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    networks:
      - url-shortener-network

  # ---------------------------------------------------------------------------
  # Development & Management Tools
  # ---------------------------------------------------------------------------
  
  # MongoDB Express (Database Management)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: url-shortener-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin123}
    networks:
      - url-shortener-network
    depends_on:
      mongodb:
        condition: service_healthy
    profiles:
      - development

  # Redis Commander (Cache Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: url-shortener-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis123}
    networks:
      - url-shortener-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - development
